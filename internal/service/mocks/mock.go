// Code generated by MockGen. DO NOT EDIT.
// Source: boundary.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/i-vasilkov/go-todo-app/internal/domain"
)

// MockAuthServiceI is a mock of AuthServiceI interface.
type MockAuthServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceIMockRecorder
}

// MockAuthServiceIMockRecorder is the mock recorder for MockAuthServiceI.
type MockAuthServiceIMockRecorder struct {
	mock *MockAuthServiceI
}

// NewMockAuthServiceI creates a new mock instance.
func NewMockAuthServiceI(ctrl *gomock.Controller) *MockAuthServiceI {
	mock := &MockAuthServiceI{ctrl: ctrl}
	mock.recorder = &MockAuthServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceI) EXPECT() *MockAuthServiceIMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockAuthServiceI) CheckToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockAuthServiceIMockRecorder) CheckToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockAuthServiceI)(nil).CheckToken), ctx, token)
}

// SignIn mocks base method.
func (m *MockAuthServiceI) SignIn(ctx context.Context, in domain.LoginUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthServiceIMockRecorder) SignIn(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthServiceI)(nil).SignIn), ctx, in)
}

// SignUp mocks base method.
func (m *MockAuthServiceI) SignUp(ctx context.Context, in domain.CreateUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceIMockRecorder) SignUp(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthServiceI)(nil).SignUp), ctx, in)
}

// MockTaskServiceI is a mock of TaskServiceI interface.
type MockTaskServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceIMockRecorder
}

// MockTaskServiceIMockRecorder is the mock recorder for MockTaskServiceI.
type MockTaskServiceIMockRecorder struct {
	mock *MockTaskServiceI
}

// NewMockTaskServiceI creates a new mock instance.
func NewMockTaskServiceI(ctrl *gomock.Controller) *MockTaskServiceI {
	mock := &MockTaskServiceI{ctrl: ctrl}
	mock.recorder = &MockTaskServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceI) EXPECT() *MockTaskServiceIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskServiceI) Create(ctx context.Context, userId string, in domain.CreateTaskInput) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, in)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceIMockRecorder) Create(ctx, userId, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskServiceI)(nil).Create), ctx, userId, in)
}

// Delete mocks base method.
func (m *MockTaskServiceI) Delete(ctx context.Context, id, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceIMockRecorder) Delete(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskServiceI)(nil).Delete), ctx, id, userId)
}

// Get mocks base method.
func (m *MockTaskServiceI) Get(ctx context.Context, id, userId string) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, userId)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskServiceIMockRecorder) Get(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskServiceI)(nil).Get), ctx, id, userId)
}

// GetAll mocks base method.
func (m *MockTaskServiceI) GetAll(ctx context.Context, userId string) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userId)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskServiceIMockRecorder) GetAll(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskServiceI)(nil).GetAll), ctx, userId)
}

// Update mocks base method.
func (m *MockTaskServiceI) Update(ctx context.Context, id, userId string, in domain.UpdateTaskInput) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, userId, in)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskServiceIMockRecorder) Update(ctx, id, userId, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskServiceI)(nil).Update), ctx, id, userId, in)
}

// MockUserRepositoryI is a mock of UserRepositoryI interface.
type MockUserRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIMockRecorder
}

// MockUserRepositoryIMockRecorder is the mock recorder for MockUserRepositoryI.
type MockUserRepositoryIMockRecorder struct {
	mock *MockUserRepositoryI
}

// NewMockUserRepositoryI creates a new mock instance.
func NewMockUserRepositoryI(ctrl *gomock.Controller) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryI) EXPECT() *MockUserRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryI) Create(ctx context.Context, in domain.CreateUserInput) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryIMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryI)(nil).Create), ctx, in)
}

// Get mocks base method.
func (m *MockUserRepositoryI) Get(ctx context.Context, id string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryIMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepositoryI)(nil).Get), ctx, id)
}

// GetByCredentials mocks base method.
func (m *MockUserRepositoryI) GetByCredentials(ctx context.Context, in domain.LoginUserInput) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, in)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUserRepositoryIMockRecorder) GetByCredentials(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUserRepositoryI)(nil).GetByCredentials), ctx, in)
}

// MockTaskRepositoryI is a mock of TaskRepositoryI interface.
type MockTaskRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryIMockRecorder
}

// MockTaskRepositoryIMockRecorder is the mock recorder for MockTaskRepositoryI.
type MockTaskRepositoryIMockRecorder struct {
	mock *MockTaskRepositoryI
}

// NewMockTaskRepositoryI creates a new mock instance.
func NewMockTaskRepositoryI(ctrl *gomock.Controller) *MockTaskRepositoryI {
	mock := &MockTaskRepositoryI{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryI) EXPECT() *MockTaskRepositoryIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepositoryI) Create(ctx context.Context, userId string, in domain.CreateTaskInput) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, in)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryIMockRecorder) Create(ctx, userId, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepositoryI)(nil).Create), ctx, userId, in)
}

// Delete mocks base method.
func (m *MockTaskRepositoryI) Delete(ctx context.Context, id, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryIMockRecorder) Delete(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepositoryI)(nil).Delete), ctx, id, userId)
}

// Get mocks base method.
func (m *MockTaskRepositoryI) Get(ctx context.Context, id, userId string) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, userId)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryIMockRecorder) Get(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepositoryI)(nil).Get), ctx, id, userId)
}

// GetAll mocks base method.
func (m *MockTaskRepositoryI) GetAll(ctx context.Context, userId string) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userId)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskRepositoryIMockRecorder) GetAll(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskRepositoryI)(nil).GetAll), ctx, userId)
}

// Update mocks base method.
func (m *MockTaskRepositoryI) Update(ctx context.Context, id, userId string, in domain.UpdateTaskInput) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, userId, in)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryIMockRecorder) Update(ctx, id, userId, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepositoryI)(nil).Update), ctx, id, userId, in)
}
