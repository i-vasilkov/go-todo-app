// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenManagerI is a mock of TokenManagerI interface.
type MockTokenManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerIMockRecorder
}

// MockTokenManagerIMockRecorder is the mock recorder for MockTokenManagerI.
type MockTokenManagerIMockRecorder struct {
	mock *MockTokenManagerI
}

// NewMockTokenManagerI creates a new mock instance.
func NewMockTokenManagerI(ctrl *gomock.Controller) *MockTokenManagerI {
	mock := &MockTokenManagerI{ctrl: ctrl}
	mock.recorder = &MockTokenManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManagerI) EXPECT() *MockTokenManagerIMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockTokenManagerI) NewToken(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockTokenManagerIMockRecorder) NewToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockTokenManagerI)(nil).NewToken), id)
}

// Parse mocks base method.
func (m *MockTokenManagerI) Parse(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenManagerIMockRecorder) Parse(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenManagerI)(nil).Parse), token)
}
